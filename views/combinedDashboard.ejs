<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <title>🌱 Kombi-Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="/styles/main.css" />
  <script src="/scripts/darkmode.js" defer></script>
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
  <style>
    .controls {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      align-items: center;
      justify-content: center;
      margin-top: 10px;
    }
    .controls label {
      display: flex;
      flex-direction: column;
      font-size: 14px;
      text-align: left;
    }
    .controls select {
      padding: 4px;
      font-size: 14px;
      min-width: 60px;
    }
  </style>
</head>
<body>
  <button class="dark-toggle" onclick="toggleDarkMode()">🌗</button>
  <div class="container">
    <h1>🌡 Kombiniertes Sensor-Dashboard</h1>

    <div id="tabsContainer" class="tabs" style="text-align:center;"></div>

    <div class="controls">
      <label>
        Aggregation:
        <select id="aggSelect">
          <option value="1">1 Min</option>
          <option value="2" selected>2 Min</option>
          <option value="3">3 Min</option>
        </select>
      </label>

      <label>
        Zeitraum:
        <select id="timeWindowSelect">
          <option value="10800" selected>3 Stunden</option>
          <option value="21600">6 Stunden</option>
          <option value="43200">12 Stunden</option>
          <option value="86400">24 Stunden</option>
          <option value="604800">7 Tage</option>
        </select>
      </label>
      <label>
        Glättung:
        <select id="smoothingSelect">
          <option value="1">Keine</option>
          <option value="3">3er Mittel</option>
          <option value="5">5er Mittel</option>
          <option value="10" selected>10er Mittel</option>
          <option value="15">15er Mittel</option>
          <option value="20">20er Mittel</option>
        </select>
      </label>
      <label>
        Marker-Quelle:
        <select id="markerFilterSelect">
          <option value="relay" selected>Alle Relais</option>
        </select>
      </label>

    </div>

    <div id="chart" style="height: 600px; margin-top: 20px;"></div>
    <div id="lastUpdate" style="margin-top: 10px; font-size: 0.9em; opacity: 0.7;"></div>
  </div>

 <script>
  console.log('🧪 SCRIPT START');

  let sensorData = {};
  let relayLog = [];
  let selectedSensor = '';
  let selectedSensorId = '';
  let sensorNames = {};
  let aggregationMinutes = 1;

  const updateTime = document.getElementById('lastUpdate');

  function fetchData() {
    const limit = 10000;
    Promise.all([
      fetch(`/api/sensordata?limit=${limit}`).then(r => r.json()),
      fetch('/api/relay-switches-log').then(r => r.json())
    ])
    .then(([sensors, relays]) => {
      sensorData = sensors;
      relayLog = relays;

      const availableKeys = Object.keys(sensorData);
      if (!availableKeys.length) {
        console.warn('⚠️ Keine Sensordaten geladen!');
        return;
      }

      // Finde ersten Key mit .json oder nimm einfach den ersten
      if (!selectedSensor || !sensorData[selectedSensor]) {
        selectedSensor = availableKeys.find(k => k.endsWith('.json')) || availableKeys[0];
        selectedSensorId = selectedSensor;
      }

      createEditableTabs(availableKeys);
      highlightActiveTab();
      drawChart();
      fetchSensorNames();
    })
    .catch(err => {
      console.error('❌ Fehler beim Laden der Daten:', err);
    });
  }

 function drawChart() {
  const data = sensorData[selectedSensor];
  if (!data) {
    console.warn('⛔ Kein Datensatz gefunden für:', selectedSensor);
    return;
  }

  const aggMin = +document.getElementById('aggSelect').value;
  const smooth = +document.getElementById('smoothingSelect').value;
  const windowMs = +document.getElementById('timeWindowSelect').value * 1000;
  const markerMode = document.getElementById('markerFilterSelect')?.value || 'sensor';
  const now = Date.now();

  // Sensor-Daten verarbeiten
  const filtered = data.filter(e => new Date(e.timestamp).getTime() >= now - windowMs);
  const aggregated = aggregate(filtered, aggMin);
  const times = aggregated.map(d => new Date(d.timestamp));
  const temps = movingAverage(aggregated.map(d => d.temperature), smooth);
  const hums = movingAverage(aggregated.map(d => d.humidity), smooth);

  const normalize = str => str.replace(/\.json$/, '');
  const normalizedSensor = normalize(selectedSensor);

  // Marker-Filterlogik
  const switches = relayLog.filter(r => {
    const ts = new Date(r.timestamp).getTime();
    if (ts < now - windowMs) return false;

    if (markerMode === 'sensor') {
      // Marker nur, wenn dieser Sensor beteiligt war
      return Array.isArray(r.sourceSensors) &&
             r.sourceSensors.some(s => normalize(s) === normalizedSensor);
    } else if (markerMode === 'relay') {
      // Alle Marker unabhängig vom Sensor zeigen
      return true;
    }
    return false;
  }).map(r => {
    const ts = new Date(r.timestamp).getTime();

    // Finde y-Position im Diagramm (damit Marker nicht ganz unten hängen)
    const closestIndex = times.reduce((best, time, i) => {
      const diff = Math.abs(time.getTime() - ts);
      return diff < best.diff ? { index: i, diff } : best;
    }, { index: -1, diff: Infinity }).index;

    let y = 50; // Fallback
    if (closestIndex !== -1 && typeof hums[closestIndex] === 'number') {
      y = hums[closestIndex];
    }

    return {
      x: [new Date(ts)],
      y: [y],
      type: 'scatter',
      mode: 'markers',
      name: `🔌 ${r.relay} (${r.state})`,
      marker: {
        size: 12,
        symbol: r.state === 'on' ? 'triangle-up' : 'triangle-down',
        color: r.state === 'on' ? '#28a745' : '#dc3545'
      },
      yaxis: 'y2',
      hovertemplate: `🔌 ${r.relay}<br>Status: ${r.state}<br>Zeit: %{x}<extra></extra>`
    };
  });

  // 🔍 Logs zur Diagnose
  console.log('📊 Sensor:', selectedSensor);
  console.log('📁 Marker-Modus:', markerMode);
  console.log('🕒 Datenpunkte:', aggregated.length);
  console.log('🔌 Alle Marker (Log):', relayLog.length);
  console.log('🎯 Angezeigte Marker:', switches.length);

  // Plotly zeichnen
  Plotly.newPlot('chart', [
    {
      x: times,
      y: temps,
      name: '🌡 Temperatur (°C)',
      type: 'scatter',
      mode: 'lines+markers'
    },
    {
      x: times,
      y: hums,
      name: '💧 Luftfeuchte (%)',
      type: 'scatter',
      mode: 'lines+markers',
      yaxis: 'y2'
    },
    ...switches
  ], {
    xaxis: { title: 'Zeit', type: 'date' },
    yaxis: { title: 'Temperatur (°C)' },
    yaxis2: { title: 'Luftfeuchte (%)', overlaying: 'y', side: 'right' },
    legend: { orientation: 'h' }
  });

  updateTime.textContent = `Zuletzt aktualisiert: ${new Date().toLocaleTimeString()}`;
}


  function aggregate(data, minutes) {
    const grouped = {};
    data.forEach(entry => {
      const key = new Date(Math.floor(new Date(entry.timestamp).getTime() / (minutes * 60000)) * minutes * 60000).toISOString();
      if (!grouped[key]) grouped[key] = [];
      grouped[key].push(entry);
    });
    return Object.entries(grouped).map(([ts, group]) => {
      const avg = arr => arr.reduce((a, b) => a + b, 0) / arr.length;
      return {
        timestamp: ts,
        temperature: avg(group.map(e => e.temperature)),
        humidity: avg(group.map(e => e.humidity))
      };
    });
  }

  function movingAverage(arr, windowSize) {
    return arr.map((_, i, a) => {
      const start = Math.max(0, i - windowSize + 1);
      const window = a.slice(start, i + 1);
      return window.reduce((sum, val) => sum + val, 0) / window.length;
    });
  }

  function highlightActiveTab() {
    document.querySelectorAll('.tab').forEach(tab => {
      tab.classList.toggle('active', tab.dataset.sensorId === selectedSensorId);
    });
  }

  function fetchSensorNames() {
    fetch('/api/sensor-names')
      .then(res => res.json())
      .then(names => {
        Object.assign(sensorNames, names);
        createEditableTabs(Object.keys(sensorData));
      });
  }

  function saveSensorName(id, newName) {
    fetch('/api/sensor-names', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ id, name: newName })
    })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        sensorNames[id] = newName;
        createEditableTabs(Object.keys(sensorData));
        drawChart();
      }
    });
  }

  function createEditableTabs(sensorIds) {
    const container = document.getElementById('tabsContainer');
    container.innerHTML = '';
    const savedOrder = JSON.parse(localStorage.getItem('sensorTabOrder') || '[]');
    if (savedOrder.length) {
      sensorIds.sort((a, b) => savedOrder.indexOf(a) - savedOrder.indexOf(b));
    }
    sensorIds.forEach(id => {
      if (sensorData[id] && sensorData[id].length > 0) {
        const wrapper = document.createElement('div');
        wrapper.className = 'tab-wrapper';
        wrapper.setAttribute('draggable', 'true');
        wrapper.dataset.sensorId = id;
        const tab = document.createElement('div');
        tab.className = 'tab';
        tab.textContent = sensorNames[id] || `Sensor ${id}`;
        tab.dataset.sensorId = id;
        if (id === selectedSensorId) tab.classList.add('active');
        tab.onclick = () => {
          selectedSensor = id;
          selectedSensorId = id;
          highlightActiveTab();
          drawChart();
        };
        tab.addEventListener('contextmenu', e => {
          e.preventDefault();
          const input = document.createElement('input');
          input.type = 'text';
          input.value = sensorNames[id] || `Sensor ${id}`;
          input.className = 'name-input';
          const saveBtn = document.createElement('button');
          saveBtn.className = 'save-btn';
          saveBtn.textContent = 'Speichern';
          saveBtn.onclick = () => {
            const newName = input.value.trim();
            if (newName) saveSensorName(id, newName);
          };
          wrapper.innerHTML = '';
          wrapper.appendChild(input);
          wrapper.appendChild(saveBtn);
        });
        wrapper.appendChild(tab);
        container.appendChild(wrapper);
        wrapper.addEventListener('dragstart', e => {
          wrapper.classList.add('dragging');
          e.dataTransfer.setData('text/plain', id);
        });
        wrapper.addEventListener('dragend', () => {
          wrapper.classList.remove('dragging');
          const newOrder = Array.from(container.children).map(el => el.dataset.sensorId);
          localStorage.setItem('sensorTabOrder', JSON.stringify(newOrder));
        });
        wrapper.addEventListener('dragover', e => {
          e.preventDefault();
          const dragging = document.querySelector('.dragging');
          if (dragging && dragging !== wrapper) {
            const bounding = wrapper.getBoundingClientRect();
            const offset = e.clientY - bounding.top;
            if (offset < bounding.height / 2) {
              container.insertBefore(dragging, wrapper);
            } else {
              container.insertBefore(dragging, wrapper.nextSibling);
            }
          }
        });
      }
    });
  }

  document.querySelectorAll('select').forEach(el => {
    el.addEventListener('change', () => {
      drawChart();
    });
  });

  fetchData();
</script>


  <div class="button-bar">
    <button onclick="location.href='/chart'">📈 Bodenfeuchte-Diagramm</button>
    <button onclick="location.href='/moisture-data'">💧 Bodenfeuchte-Datenbank</button>
    <button onclick="location.href='/log'">📜 Logbuch</button>
    <button onclick="location.href='/system-status'">🩺 System-Status</button>
    <button onclick="location.href='/stats'">🔢 Bewässerungs-Zähler</button>
    <button onclick="location.href='/sensordata'">🌡️💧 Temperatur-Feuchtigkeits-Diagramme</button>
    <button onclick="location.href='/dashboard/history'">🌡️💧 Klima-Diagramme</button>
    <button onclick="location.href='/klima-control'">🌱 Klima-Automatisierung</button>
    <button onclick="location.href='/relay-cycle'">🌬️ Umluft-Automatik</button>
    <button onclick="location.href='/rulelog'">Regel-Log</button>
    <button type="button" onclick="location.href='/climate-evaluation'">Klima-Evaluation</button>
    <button onclick="location.href='/ui'">Zur Übersicht</button>
  </div>
</body>
</html>
