<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>TP357S Sensor Dashboard</title>
  <link rel="stylesheet" href="/styles/main.css" />
  <script src="/scripts/darkmode.js" defer></script>
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
  <button class="dark-toggle" onclick="toggleDarkMode()">🌗</button>

  <div class="container">
    <h1>📈 TP357S Sensor Dashboard</h1>
    <div id="updateTime"></div>
    <div id="tabsContainer" class="tabs">
  </div>

    <div style="text-align: center; margin: 10px 0;">
      <label for="dataLimitSelect">Anzahl Datenpunkte:</label>
      <select id="dataLimitSelect">
      <option value="10">10</option>
      <option value="100">100</option>	
      <option value="200">200</option>
      <option value="300">300</option>
      <option value="500">500</option>
      <option value="1000" selected>1000</option>
      <option value="3000">3000</option>
      <option value="10000">10000</option>
      </select>
  </div>

    <div id="chartsContainer"></div>
  </div>

  <script>
    let sensorData = {};
    let selectedSensorId = "";
    const sensorNames = {};

    const tabsContainer = document.getElementById('tabsContainer');
    const chartsContainer = document.getElementById('chartsContainer');
    const updateTime = document.getElementById('updateTime');

    function fetchSensorNames() {
      fetch('/api/sensor-names')
        .then(res => res.json())
        .then(names => {
          Object.assign(sensorNames, names);
          createEditableTabs(Object.keys(sensorData));
        })
        .catch(err => console.error('Fehler beim Abrufen der Namen:', err));
    }

function fetchSensorData(limit = 100) {
  fetch(`/api/sensordata?limit=${limit}`)
    .then(res => res.json())
    .then(data => {
      sensorData = data;
      const ids = Object.keys(data);
      if (!selectedSensorId || !sensorData[selectedSensorId]) {
        selectedSensorId = ids[0];
      }
      if (!tabsContainer.hasChildNodes()) {
        createEditableTabs(ids);
      }
      highlightActiveTab();
      drawCharts(sensorData[selectedSensorId], selectedSensorId);
      updateTime.textContent = `Letzte Aktualisierung: ${new Date().toLocaleTimeString()}`;
    })
    .catch(err => console.error('Fehler beim Laden:', err));
}


    function createEditableTabs(sensorIds) {
      tabsContainer.innerHTML = '';
      const savedOrder = JSON.parse(localStorage.getItem('sensorTabOrder') || '[]');
      if (savedOrder.length) {
        sensorIds.sort((a, b) => savedOrder.indexOf(a) - savedOrder.indexOf(b));
      }

      sensorIds.forEach(id => {
        if (sensorData[id] && sensorData[id].length > 0) {
          const wrapper = document.createElement('div');
          wrapper.className = 'tab-wrapper';
          wrapper.setAttribute('draggable', 'true');
          wrapper.dataset.sensorId = id;

          const tab = document.createElement('div');
          tab.className = 'tab';
          tab.textContent = sensorNames[id] || `Sensor ${id}`;
          tab.dataset.sensorId = id;
          if (id === selectedSensorId) tab.classList.add('active');

          tab.onclick = () => {
            selectedSensorId = id;
            highlightActiveTab();
            drawCharts(sensorData[id], id);
          };

          tab.addEventListener('contextmenu', e => {
            e.preventDefault();
            const input = document.createElement('input');
            input.type = 'text';
            input.value = sensorNames[id] || `Sensor ${id}`;
            input.className = 'name-input';

            const saveBtn = document.createElement('button');
            saveBtn.className = 'save-btn';
            saveBtn.textContent = 'Speichern';
            saveBtn.onclick = () => {
              const newName = input.value.trim();
              if (newName) saveSensorName(id, newName);
            };

            wrapper.innerHTML = '';
            wrapper.appendChild(input);
            wrapper.appendChild(saveBtn);
          });

          wrapper.appendChild(tab);
          tabsContainer.appendChild(wrapper);

          wrapper.addEventListener('dragstart', e => {
            wrapper.classList.add('dragging');
            e.dataTransfer.setData('text/plain', id);
          });

          wrapper.addEventListener('dragend', () => {
            wrapper.classList.remove('dragging');
            const newOrder = Array.from(tabsContainer.children).map(el => el.dataset.sensorId);
            localStorage.setItem('sensorTabOrder', JSON.stringify(newOrder));
          });

          wrapper.addEventListener('dragover', e => {
            e.preventDefault();
            const dragging = document.querySelector('.dragging');
            if (dragging && dragging !== wrapper) {
              const bounding = wrapper.getBoundingClientRect();
              const offset = e.clientY - bounding.top;
              if (offset < bounding.height / 2) {
                tabsContainer.insertBefore(dragging, wrapper);
              } else {
                tabsContainer.insertBefore(dragging, wrapper.nextSibling);
              }
            }
          });
        }
      });
    }

    function highlightActiveTab() {
      document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.toggle('active', tab.dataset.sensorId === selectedSensorId);
      });
    }

    function saveSensorName(id, newName) {
      fetch('/api/sensor-names', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id, name: newName })
      })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            sensorNames[id] = newName;
            createEditableTabs(Object.keys(sensorData));
            drawCharts(sensorData[selectedSensorId], selectedSensorId);
          } else {
            alert('Fehler beim Speichern.');
          }
        })
        .catch(err => {
          console.error('Speicherfehler:', err);
          alert('Speichern fehlgeschlagen.');
        });
    }

    function drawCharts(entries, sensorId) {
      if (!entries || entries.length === 0) return;

      const timestamps = entries.map(d => new Date(d.timestamp));
      const temps = entries.map(d => d.temperature);
      const hums = entries.map(d => d.humidity);

      const T = temps[temps.length - 1];
      const RH = hums[hums.length - 1];
      const vpd = calcVPD(T, RH);

      let bgColor = '';
      if (vpd < 0.8) bgColor = 'rgba(0, 0, 255, 0.1)';
      else if (vpd > 1.35) bgColor = 'rgba(255, 0, 0, 0.1)';
      else bgColor = 'rgba(0, 255, 0, 0.1)';

      const chartNeedsInit = document.getElementById('tempChart')?.dataset.sensorId !== sensorId;
      if (chartNeedsInit) {
        chartsContainer.innerHTML = `
          <div style="width: 100%; display: flex; justify-content: flex-end;">
            <div id="vpdDisplay" title="" style="margin-bottom: 10px; padding: 5px 10px; background: var(--card-bg); border-radius: 6px; font-size: 13px; color: var(--text-color); cursor: help;">
              VPD: <strong>–</strong>
            </div>
          </div>
          <div class="chart-container-sensor">
            <h3>🌡️ Temperatur-Verlauf – ${sensorNames[sensorId] || `Sensor ${sensorId}`}</h3>
            <div id="tempChart" data-sensor-id="${sensorId}"></div>
          </div>
          <div class="chart-container-sensor">
            <h3>💧 Feuchtigkeits-Verlauf – ${sensorNames[sensorId] || `Sensor ${sensorId}`}</h3>
            <div id="humChart"></div>
          </div>
        `;
      }

      const vpdBox = document.getElementById('vpdDisplay');
      if (vpdBox) {
        vpdBox.innerHTML = `
          🌡️ <strong>${T.toFixed(1)} °C</strong> |
          💧 <strong>${RH.toFixed(1)} %</strong> |
          VPD: <strong>${vpd} kPa</strong>
        `;
        vpdBox.title = "VPD < 0.6 = zu feucht · 0.6–1.2 = ideal · > 1.2 = zu trocken";
      }

      Plotly.react("tempChart", [{
        x: timestamps,
        y: temps,
        type: 'scatter',
        mode: 'lines+markers',
        name: 'Temperatur (°C)',
        line: { color: 'green', width: 3 },
        marker: { color: temps.map(t => t > 30 ? 'red' : 'green'), size: 6 }
      }], {
        xaxis: { title: 'Zeit', type: 'date', tickformat: '%d.%m.%Y %H:%M', tickangle: -45 },
        yaxis: { title: 'Temperatur (°C)', range: [0, 40] },
        shapes: [{
          type: 'rect', xref: 'paper', x0: 0, x1: 1,
          yref: 'y', y0: 0, y1: 40,
          fillcolor: bgColor, line: { width: 0 }
        }],
        margin: { t: 20, r: 20, b: 60, l: 60, b: 100 }
      });

      Plotly.react("humChart", [{
        x: timestamps,
        y: hums,
        type: 'scatter',
        mode: 'lines+markers',
        name: 'Feuchtigkeit (%)',
        line: { color: 'blue', width: 3 },
        marker: { color: hums.map(h => h > 60 ? 'red' : 'blue'), size: 6 }
      }], {
        xaxis: { title: 'Zeit', type: 'date', tickformat: '%d.%m.%Y %H:%M', tickangle: -45 },
        yaxis: { title: 'Feuchtigkeit (%)', range: [0, 100] },
        shapes: [{
          type: 'rect', xref: 'paper', x0: 0, x1: 1,
          yref: 'y', y0: 0, y1: 100,
          fillcolor: bgColor, line: { width: 0 }
        }],
        margin: { t: 20, r: 20, b: 60, l: 60, b: 100 }
      });
    }

    function calcVPD(tempC, rh) {
      const es = 0.6108 * Math.exp((17.27 * tempC) / (tempC + 237.3));
      const ea = es * (rh / 100);
      return parseFloat((es - ea).toFixed(2));
    }

    let currentLimit = 100;

    document.getElementById('dataLimitSelect').addEventListener('change', (e) => {
      currentLimit = parseInt(e.target.value);
      fetchSensorData(currentLimit);
    });

    // Initialer Aufruf
    fetchSensorNames();
    fetchSensorData(currentLimit);
  
  </script>
    <div class="button-bar">
      <button type="button" onclick="location.href='/chart'">📈 Bodenfeuchte-Diagramm</button>
      <button type="button" onclick="location.href='/moisture-data'">💧 Bodenfeuchte-Datenbank</button>
      <button type="button" onclick="location.href='/log'">📜 Logbuch</button>
      <button type="button" onclick="location.href='/system-status'">🩺 System-Status</button>
      <button type="button" onclick="location.href='/stats'">🔢 Bewässerungs-Zähler</button>
      <button type="button" onclick="location.href='/dashboard/history'">🌡️💧 Klima-Diagramme</button>
      <button type="button" onclick="location.href='/klima-control'">🌱 Klima-Automatisierung</button>
      <button type="button" onclick="location.href='/relay-cycle'">🌬️ Umluft-Automatik</button>
      <button type="button" onclick="location.href='/rulelog'">Regel-Log</button>
      <button type="button" onclick="location.href='/combined-dashboard'">Combi-Dashboard</button>
      <button type="button" onclick="location.href='/ui'">Zur Übersicht</button>
    </div>
  </body>
</body>
</html>
