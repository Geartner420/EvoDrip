<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <title>🌱 Klima-Automatisierung 🌱</title>
  <link rel="stylesheet" href="/styles/card.css" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
</head>
<body>
  <h1>🌱Klima-Automatisierung</h1>
  <button class="dark-toggle" onclick="toggleDarkMode()">🌗</button>
  <div class="card-container" id="sensor-cards-container"></div>
  <div id="root"></div>
  <!-- Sensor-Daten laden -->
  <script>
  function toggleDarkMode() {
    document.documentElement.classList.toggle('dark');
    localStorage.setItem('theme', document.documentElement.classList.contains('dark') ? 'dark' : 'light');
  }

  // Theme beim Laden anwenden
  (function () {
    if (localStorage.getItem('theme') === 'dark') {
      document.documentElement.classList.add('dark');
    }
  })();
  
    let sensorNameMap = {};

    fetch('/api/sensor-names')
      .then(res => res.json())
      .then(data => {
        sensorNameMap = data;
        fetchSensorData();
        setInterval(fetchSensorData, 10000);
      });

    async function fetchSensorData() {
      try {
        const res = await fetch('/api/sensor-status');
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const sensors = await res.json();

        const container = document.getElementById('sensor-cards-container');
        if (!container) return;

        container.innerHTML = '';
        for (const [id, data] of Object.entries(sensors)) {
          const card = document.createElement('div');
          const nameKey = id.replace('sensor_', '').replace('.json', '');
          const sensorName = sensorNameMap[nameKey] || `Sensor ${id}`;
          card.className = 'card';
          card.innerHTML = `
            <div class="card-title">${sensorName}</div>
            <div class="card-value">🌡️ ${data.temperature} °C</div>
            <div class="card-value">💧 ${data.humidity} %</div>
            <div class="card-footer">🕛 ${new Date(data.timestamp).toLocaleString('de-DE')}</div>
          `;
          container.appendChild(card);
        }
      } catch (err) {
        console.error('Sensorwerte konnten nicht geladen werden:', err);
        const container = document.getElementById('sensor-cards-container');
        if (container) {
          container.innerHTML = '<div class="error-msg">Fehler beim Laden der Sensorwerte.</div>';
        }
      }
    }
  </script>

  <!-- React & Babel Setup -->
  <script src="https://unpkg.com/react@18/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <script type="text/babel">
    const { useState, useEffect } = React;

    const operatorLabels = {
      '>': 'größer als',
      '<': 'kleiner als',
      '>=': 'größer oder gleich',
      '<=': 'kleiner oder gleich',
      '==': 'gleich'
    };

    const normalizeFloat = (value) => (value || '').replace(',', '.');

    function convertCommaToDot(rule) {
      return {
        ...rule,
        conditions: rule.conditions.map(cond => ({
          ...cond,
          value: normalizeFloat(cond.value),
          hysteresis: normalizeFloat(cond.hysteresis)
        }))
      };
    }

    function EditableRuleItem({ r, operatorLabels, onDelete, onUpdate }) {
  const [editMode, setEditMode] = useState(false);
  const [editRule, setEditRule] = useState(r);
  const [originalRule] = useState(() => structuredClone(r));
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState(false);

  function saveEdit() {
    const updatedRule = convertCommaToDot(editRule);

    fetch('/api/rules/updateRule', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ oldRule: originalRule, newRule: updatedRule })
    })
      .then(res => {
        if (res.ok) {
          onUpdate(originalRule, updatedRule);
          setSuccess(true);
          setTimeout(() => setSuccess(false), 2000);
          setEditMode(false);
        } else {
          throw new Error('Serverfehler');
        }
      })
      .catch(() => {
        setError(true);
        setTimeout(() => setError(false), 2000);
      });
  }

  return (
    <div className="rule-item">
      <div style={{ flex: 1 }}>
        {!editMode ? (
          <>
            <strong>{r.relay}</strong> {r.action === 'on' ? 'einschalten' : 'ausschalten'}<br />
            Wenn {r.conditions.map(c =>
              `${c.param} ${operatorLabels[c.op] || c.op} ${c.value}`
            ).join(` ${r.logic || 'AND'} `)}
            {r.activeFrom && r.activeTo && (
              <div style={{ fontSize: '12px', color: '#555' }}>
                (aktiv von {r.activeFrom} bis {r.activeTo})
              </div>
            )}
          </>
        ) : (
          <>
            <select value={editRule.action} onChange={e => setEditRule({ ...editRule, action: e.target.value })}>
              <option value="on">Einschalten</option>
              <option value="off">Ausschalten</option>
            </select>
            <input type="time" value={editRule.activeFrom} onChange={e => setEditRule({ ...editRule, activeFrom: e.target.value })} />
            <input type="time" value={editRule.activeTo} onChange={e => setEditRule({ ...editRule, activeTo: e.target.value })} />

            <label style={{ display: 'block', marginTop: '4px' }}>
              Logik:
              <select value={editRule.logic || 'AND'} onChange={e => setEditRule({ ...editRule, logic: e.target.value })}>
                <option value="AND">UND (alle Bedingungen müssen erfüllt sein)</option>
                <option value="OR">ODER (eine Bedingung reicht)</option>
              </select>
            </label>

            {editRule.conditions.map((c, i) => (
              <div key={i} style={{ display: 'flex', gap: '6px', marginBottom: '4px', flexWrap: 'wrap' }}>
                <select value={c.param} onChange={e => {
                  const cond = [...editRule.conditions];
                  cond[i].param = e.target.value;
                  setEditRule({ ...editRule, conditions: cond });
                }}>
                  <option value="vpd">VPD</option>
                  <option value="temperature">Temperatur</option>
                  <option value="humidity">Luftfeuchtigkeit</option>
                </select>
                <select value={c.op} onChange={e => {
                  const cond = [...editRule.conditions];
                  cond[i].op = e.target.value;
                  setEditRule({ ...editRule, conditions: cond });
                }}>
                  <option value=">">Größer als</option>
                  <option value="<">Kleiner als</option>
                  <option value=">=">Größer oder gleich</option>
                  <option value="<=">Kleiner oder gleich</option>
                  <option value="==">Gleich</option>
                </select>
                <input type="text" value={c.value} onChange={e => {
                  const cond = [...editRule.conditions];
                  cond[i].value = e.target.value;
                  setEditRule({ ...editRule, conditions: cond });
                }} />
                <input type="number" step="0.1" placeholder="Hysterese" value={c.hysteresis || ''} onChange={e => {
                  const cond = [...editRule.conditions];
                  cond[i].hysteresis = e.target.value;
                  setEditRule({ ...editRule, conditions: cond });
                }} />
                <button className="delete-btn" onClick={() => {
                  const updated = [...editRule.conditions];
                  updated.splice(i, 1);
                  setEditRule({ ...editRule, conditions: updated });
                }}>🗑️</button>
              </div>
            ))}
            <button onClick={() => setEditRule({ ...editRule, conditions: [...editRule.conditions, { param: 'vpd', op: '>', value: '', hysteresis: '' }] })}>➕ Bedingung</button>
          </>
        )}
      </div>
      <div style={{ display: 'flex', flexDirection: 'column', marginLeft: '10px', gap: '4px' }}>
        {!editMode ? (
          <>
            <button onClick={() => setEditMode(true)}>✏️ Bearbeiten</button>
            <button className="delete-btn" onClick={() => {
              if (confirm('⚠️ Bist du sicher, dass du diese Regel löschen möchtest?')) {
                onDelete(r);
              }
            }}>🗑️ löschen</button>
          </>
        ) : (
          <>
            <button onClick={saveEdit}>💾 speichern</button>
            <button onClick={() => {
              setEditRule(r);
              setEditMode(false);
            }}>✖️ abbrechen</button>
          </>
        )}
        {success && <div className="success-msg">✅ Gespeichert</div>}
        {error && <div className="error-msg">❌ Fehler beim Speichern</div>}
      </div>
    </div>
  );
}

    function SensorRuleGroup({ sensor, rules, operatorLabels, onDelete, onUpdate }) {
      const [expanded, setExpanded] = useState(false);

      return (
        <div style={{ marginBottom: '12px' }}>
          <div
  onClick={() => setExpanded(!expanded)}
  className={`sensor-header ${expanded ? 'expanded' : ''}`}
>
  {expanded ? '▼' : '▶'} {sensor} ({rules.length} Regel{rules.length !== 1 ? 'n' : ''})
</div>

          {expanded && (
            <div style={{ paddingLeft: '10px', marginTop: '6px' }}>
              {rules.map((r, i) => (
                <EditableRuleItem
                  key={i}
                  r={r}
                  operatorLabels={operatorLabels}
                  onDelete={onDelete}
                  onUpdate={onUpdate}
                />
              ))}
            </div>
          )}
        </div>
      );
    }

    function App() {
      const [rules, setRules] = useState([]);
      const [relays, setRelays] = useState([]);
      const [sensors, setSensors] = useState([]);
      const [sensorNameMap, setSensorNameMap] = useState({});
      const [newRelay, setNewRelay] = useState({ name: '', ip: '' });
      const [newRule, setNewRule] = useState({
        sensor: '',
        relay: '',
        action: '',
        activeFrom: '',
        activeTo: '',
        conditions: [{ param: 'vpd', op: '>', value: '', hysteresis: '' }]
      });
      const [saveMessage, setSaveMessage] = useState('');

      useEffect(() => {
        fetch('/api/relaysRules')
          .then(res => res.json())
          .then(data => {
            if (Array.isArray(data)) {
              setRelays(data);
            } else if (Array.isArray(data.relays)) {
              setRelays(data.relays);
            } else {
              console.error("Relays-API Formatfehler:", data);
              setRelays([]);
            }
          })
          .catch(err => {
            console.error("Relays-API Fehler:", err);
            setRelays([]);
          });

        fetch('/api/rules')
          .then(res => res.json())
          .then(data => setRules(Array.isArray(data) ? data : []));

        fetch('/api/sensors')
          .then(res => res.json())
          .then(data => setSensors(Array.isArray(data) ? data : []));

        fetch('/api/sensor-names')
          .then(res => res.json())
          .then(data => setSensorNameMap(data || {}));
      }, []);
      function addRule() {
        const updatedRule = convertCommaToDot(newRule);

        fetch('/api/rules/add', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(updatedRule)
        }).then(res => {
          if (res.ok) {
            setRules(prev => [...prev, updatedRule]);
            setNewRule({
              sensor: '',
              relay: '',
              action: '',
              activeFrom: '',
              activeTo: '',
              conditions: [{ param: 'vpd', op: '>', value: '', hysteresis: '' }]
            });
            setSaveMessage('✅ Regel hinzugefügt');
            setTimeout(() => setSaveMessage(''), 2000);
          } else {
            throw new Error();
          }
        }).catch(() => {
          setSaveMessage('❌ Fehler beim Hinzufügen');
          setTimeout(() => setSaveMessage(''), 2000);
        });
      }

      function deleteRule(ruleToDelete) {
        fetch('/api/rules/delete', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(ruleToDelete)
        }).then(() => {
          setRules(rules => rules.filter(rule => JSON.stringify(rule) !== JSON.stringify(ruleToDelete)));
        });
      }

      function updateRuleInUI(oldRule, newRule) {
        setRules(rules => rules.map(r =>
          JSON.stringify(r) === JSON.stringify(oldRule) ? newRule : r
        ));
      }

      const grouped = rules.reduce((acc, rule) => {
        acc[rule.sensor] = acc[rule.sensor] || [];
        acc[rule.sensor].push(rule);
        return acc;
      }, {});
      return (
        <div>
          <div className="rule-list">
            <h2>Regeln</h2>
            {Object.entries(grouped).map(([sensorId, sensorRules]) => (
              <SensorRuleGroup
                key={sensorId}
                sensor={sensorNameMap[sensorId.replace('sensor_', '').replace('.json', '')] || sensorId}
                rules={sensorRules}
                operatorLabels={operatorLabels}
                onDelete={deleteRule}
                onUpdate={updateRuleInUI}
              />
            ))}
          </div>

          <div className="form-container">
            <div className="field-group">
              <label>Sensor</label>
              <select value={newRule.sensor} onChange={e => setNewRule({ ...newRule, sensor: e.target.value })}>
                <option value="">Sensor wählen</option>
                {Array.isArray(sensors) && sensors.map(s => (
                  <option key={s} value={s}>
                    {sensorNameMap[s.replace('sensor_', '').replace('.json', '')] || s}
                  </option>
                ))}
              </select>
            </div>

            <div className="field-group">
              <label>Relais</label>
              <select value={newRule.relay} onChange={e => setNewRule({ ...newRule, relay: e.target.value })}>
                <option value="">Relais wählen</option>
                {Array.isArray(relays) && relays.map(r => (
                  <option key={r.name} value={r.name}>{r.name}</option>
                ))}
              </select>
            </div>

            <div className="field-group">
              <label>Aktion</label>
              <select value={newRule.action} onChange={e => setNewRule({ ...newRule, action: e.target.value })}>
                <option value="">Aktion wählen</option>
                <option value="on">einschalten</option>
                <option value="off">ausschalten</option>
              </select>
            </div>

            <div className="field-group">
              <label>Aktiv von</label>
              <input type="time" value={newRule.activeFrom} onChange={e => setNewRule({ ...newRule, activeFrom: e.target.value })} />
            </div>

            <div className="field-group">
              <label>Aktiv bis</label>
              <input type="time" value={newRule.activeTo} onChange={e => setNewRule({ ...newRule, activeTo: e.target.value })} />
            </div>
            {newRule.conditions.map((cond, i) => (
              <div key={i} style={{ display: 'flex', gap: '6px', flexWrap: 'wrap', alignItems: 'center' }}>
                <label>Bedingung {i + 1}</label>
                <select value={cond.param} onChange={e => {
                  const updated = [...newRule.conditions];
                  updated[i].param = e.target.value;
                  setNewRule({ ...newRule, conditions: updated });
                }}>
                  <option value="vpd">VPD</option>
                  <option value="temperature">Temperatur</option>
                  <option value="humidity">Luftfeuchtigkeit</option>
                </select>

                <select value={cond.op} onChange={e => {
                  const updated = [...newRule.conditions];
                  updated[i].op = e.target.value;
                  setNewRule({ ...newRule, conditions: updated });
                }}>
                  <option value=">">größer als</option>
                  <option value="<">kleiner als</option>
                  <option value=">=">größer oder gleich</option>
                  <option value="<=">kleiner oder gleich</option>
                  <option value="==">gleich</option>
                </select>

                <input type="text" value={cond.value} onChange={e => {
                  const updated = [...newRule.conditions];
                  updated[i].value = e.target.value;
                  setNewRule({ ...newRule, conditions: updated });
                }} />

                <input type="number" step="0.1" placeholder="Hysterese" value={cond.hysteresis || ''} onChange={e => {
                  const updated = [...newRule.conditions];
                  updated[i].hysteresis = e.target.value;
                  setNewRule({ ...newRule, conditions: updated });
                }} />

                <button className="delete-btn" onClick={() => {
                  const updated = [...newRule.conditions];
                  updated.splice(i, 1);
                  setNewRule({ ...newRule, conditions: updated });
                }}>🗑️</button>
              </div>
            ))}

            <div className="field-group">
              <button onClick={() => setNewRule({ ...newRule, conditions: [...newRule.conditions, { param: 'vpd', op: '>', value: '', hysteresis: '' }] })}>
                ➕ Bedingung
              </button>
            </div>

            <div className="field-group">
              <button onClick={addRule}>➕ Regel hinzufügen</button>
              {saveMessage && <div className={saveMessage.startsWith('✅') ? 'success-msg' : 'error-msg'}>{saveMessage}</div>}
            </div>
          </div>

          <div className="rule-list">
            <h2>Bekannte Relais</h2>
            <ul style={{ listStyle: 'none', padding: 0 }}>
              {Array.isArray(relays) && relays.map(r => (
                <li key={r.name}><strong>{r.name}</strong> → {r.ip}</li>
              ))}
            </ul>

            <h3>Neues Relais</h3>
            <div style={{ display: 'flex', gap: '8px', marginTop: '6px', flexWrap: 'wrap' }}>
              <input type="text" placeholder="Relaisname" value={newRelay.name} onChange={e => setNewRelay({ ...newRelay, name: e.target.value })} />
              <input type="text" placeholder="IP-Adresse" value={newRelay.ip} onChange={e => setNewRelay({ ...newRelay, ip: e.target.value })} />
              <button onClick={() => {
                const updated = [...relays, newRelay];
                fetch('/api/relaysRules', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(updated)
                }).then(() => {
                  setRelays(updated);
                  setNewRelay({ name: '', ip: '' });
                });
              }}>➕ Hinzufügen</button>
            </div>
          </div>
        </div>
      );
    }

    const root = document.getElementById('root');
    if (!root) {
      console.error("💥 Kein Root-Element für React gefunden!");
    } else {
      ReactDOM.createRoot(root).render(<App />);
    }
  </script>
      <div class="button-bar">
      <button type="button" onclick="location.href='/chart'">📈 Bodenfeuchte-Diagramm</button>
      <button type="button" onclick="location.href='/moisture-data'">💧 Bodenfeuchte-Datenbank</button>
      <button type="button" onclick="location.href='/log'">📜 Logbuch</button>
      <button type="button" onclick="location.href='/system-status'">🩺 System-Status</button>
      <button type="button" onclick="location.href='/stats'">🔢 Bewässerungs-Zähler</button>
      <button type="button" onclick="location.href='/sensordata'">🌡️💧 Temperatur-Feuchtigkeits-Diagramme</button>
      <button type="button" onclick="location.href='/dashboard/history'">🌡️💧 Klima-Diagramme</button>
      <button type="button" onclick="location.href='/relay-cycle'">🌬️ Umluft-Automatik</button>
      <button type="button" onclick="location.href='/rulelog'">Regel-Log</button>
      <button type="button" onclick="location.href='/ui'">Zur Übersicht</button>
      </div>
</body>
</html>
