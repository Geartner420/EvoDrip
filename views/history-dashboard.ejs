<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <title>TP357S History Dashboard</title>
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
  <style>
    body { font-family: Arial; background: #f9f9f9; padding: 20px; }
    h1 { text-align: center; color: #4CAF50; }
    .container { max-width: 1200px; margin: auto; }
    .tab { cursor: pointer; background: #eee; margin: 5px; padding: 10px; border-radius: 6px; display: inline-block; }
    .tab.active { background: #4CAF50; color: white; font-weight: bold; }
    .charts { display: flex; flex-wrap: wrap; gap: 20px; margin-top: 20px; }
    .chart-box { background: white; border: 1px solid #ccc; border-radius: 10px; padding: 10px; flex: 1 1 45%; }
    @media(max-width: 768px){ .chart-box { flex: 1 1 100%; } }
    .back-btn {
  display: block;
  margin: 20px auto;
  text-align: center;
  background-color: #4CAF50;
  color: white;
  padding: 10px 20px;
  border-radius: 5px;
  text-decoration: none;
  width: max-content;
}
.back-btn:hover {
  background-color: #45a049;
}
 </style>
</head>
<body>
    <div class="container">
      <h1>📈 TP357S Klima-Diagramme</h1>
      <a class="back-btn" href="/">Zurück zur Übersicht</a>
      <div id="tabs"></div>
      <div id="charts" class="charts"></div>
    </div>
  

  <script>
    let historyData = {};
    let selectedSensor = "";

    function fetchHistory() {
      fetch('/api/history')
        .then(res => res.json())
        .then(data => {
          historyData = data;
          const sensorIds = Object.keys(data);
          if (!selectedSensor || !historyData[selectedSensor]) {
            selectedSensor = sensorIds[0];
          }
          renderTabs(sensorIds);
          renderCharts();
        })
        .catch(err => console.error('Fehler beim Laden der Historie:', err));
    }

    function renderTabs(ids) {
      const tabsDiv = document.getElementById('tabs');
      tabsDiv.innerHTML = '';
      ids.forEach(id => {
        const tab = document.createElement('div');
        tab.className = 'tab' + (id === selectedSensor ? ' active' : '');
        tab.textContent = `Sensor ${id}`;
        tab.onclick = () => {
          selectedSensor = id;
          document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
          tab.classList.add('active');
          renderCharts();
        };
        tabsDiv.appendChild(tab);
      });
    }

    function renderCharts() {
      const entrys = historyData[selectedSensor];
      if (!entrys) return;

      const timestamps = entrys.map(e => new Date(e.timestamp));
      const vpd = entrys.map(e => e.vpd);
      const leafVpd = entrys.map(e => e.leaf_vpd);
      const dewPoint = entrys.map(e => e.dew_point);
      const absHumidity = entrys.map(e => e.absolute_humidity);

      const charts = [
        { id: 'vpdChart', title: '🌬️ VPD', y: vpd },
        { id: 'leafVpdChart', title: '🍃 Leaf VPD', y: leafVpd },
        { id: 'dewPointChart', title: '❄️ Taupunkt (°C)', y: dewPoint },
        { id: 'absHumChart', title: '💧 Absolute Feuchte (g/m³)', y: absHumidity }
      ];

      const chartsDiv = document.getElementById('charts');
      chartsDiv.innerHTML = '';

      charts.forEach(({ id, title, y }) => {
        const box = document.createElement('div');
        box.className = 'chart-box';
        box.innerHTML = `<h4>${title}</h4><div id="${id}" style="height:300px;"></div>`;
        chartsDiv.appendChild(box);

        Plotly.newPlot(id, [{
          x: timestamps, y, type: 'scatter', mode: 'lines', line: { width: 2 }
        }], {
          margin: { t: 30 }, xaxis: { title: 'Zeit', type: 'date' }, yaxis: { title }
        });
      });
    }

    fetchHistory();
    setInterval(fetchHistory, 60000); // alle 60 Sekunden
  </script>
</body>
</html>
